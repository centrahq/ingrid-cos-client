<?php
/**
 * Session
 *
 * PHP version 5
 *
 * @category Class
 * @package  COS\Swagger
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
* COS API
 *
* No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
* OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.4
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace COS\Swagger\Model;

use \ArrayAccess;
use \COS\Swagger\ObjectSerializer;

/**
 * Session Class Doc Comment
 *
 * @category Class
 * @description A root object of COS system that holds data required by the widget. Whenever user selects a shipping option using the widget or anything is changed in a cart, session is updated and stored.
 * @package  COS\Swagger
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Session implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Session';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
'token' => 'string',
'status' => 'string',
'customer_info' => '\COS\Swagger\Model\CustomerInfo',
'cart' => '\COS\Swagger\Model\Cart',
'user_choice' => '\COS\Swagger\Model\Choice',
'preselected_choice' => '\COS\Swagger\Model\Choice',
'shipping_categories' => '\COS\Swagger\Model\ShippingCategory[]',
'shipping_options' => '\COS\Swagger\Model\ShippingOption[]',
'purchase_country' => 'string',
'purchase_currency' => 'string',
'locale' => 'string',
'external_id' => 'string',
'choices' => '\COS\Swagger\Model\Choice[]',
'additional_information' => '\COS\Swagger\Model\AdditionalInfo',
'expires_at' => 'string',
'tos_id' => 'string',
'custom_shipping_locations' => '\COS\Swagger\Model\CustomShippingLocation[]',
'customer' => '\COS\Swagger\Model\CustomerInfo',
'search_address' => '\COS\Swagger\Model\Address',
'updated_at' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
'token' => null,
'status' => null,
'customer_info' => null,
'cart' => null,
'user_choice' => null,
'preselected_choice' => null,
'shipping_categories' => null,
'shipping_options' => null,
'purchase_country' => null,
'purchase_currency' => null,
'locale' => null,
'external_id' => null,
'choices' => null,
'additional_information' => null,
'expires_at' => null,
'tos_id' => null,
'custom_shipping_locations' => null,
'customer' => null,
'search_address' => null,
'updated_at' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'token' => 'token',
'status' => 'status',
'customer_info' => 'customer_info',
'cart' => 'cart',
'user_choice' => 'user_choice',
'preselected_choice' => 'preselected_choice',
'shipping_categories' => 'shipping_categories',
'shipping_options' => 'shipping_options',
'purchase_country' => 'purchase_country',
'purchase_currency' => 'purchase_currency',
'locale' => 'locale',
'external_id' => 'external_id',
'choices' => 'choices',
'additional_information' => 'additional_information',
'expires_at' => 'expires_at',
'tos_id' => 'tos_id',
'custom_shipping_locations' => 'custom_shipping_locations',
'customer' => 'customer',
'search_address' => 'search_address',
'updated_at' => 'updated_at'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'token' => 'setToken',
'status' => 'setStatus',
'customer_info' => 'setCustomerInfo',
'cart' => 'setCart',
'user_choice' => 'setUserChoice',
'preselected_choice' => 'setPreselectedChoice',
'shipping_categories' => 'setShippingCategories',
'shipping_options' => 'setShippingOptions',
'purchase_country' => 'setPurchaseCountry',
'purchase_currency' => 'setPurchaseCurrency',
'locale' => 'setLocale',
'external_id' => 'setExternalId',
'choices' => 'setChoices',
'additional_information' => 'setAdditionalInformation',
'expires_at' => 'setExpiresAt',
'tos_id' => 'setTosId',
'custom_shipping_locations' => 'setCustomShippingLocations',
'customer' => 'setCustomer',
'search_address' => 'setSearchAddress',
'updated_at' => 'setUpdatedAt'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'token' => 'getToken',
'status' => 'getStatus',
'customer_info' => 'getCustomerInfo',
'cart' => 'getCart',
'user_choice' => 'getUserChoice',
'preselected_choice' => 'getPreselectedChoice',
'shipping_categories' => 'getShippingCategories',
'shipping_options' => 'getShippingOptions',
'purchase_country' => 'getPurchaseCountry',
'purchase_currency' => 'getPurchaseCurrency',
'locale' => 'getLocale',
'external_id' => 'getExternalId',
'choices' => 'getChoices',
'additional_information' => 'getAdditionalInformation',
'expires_at' => 'getExpiresAt',
'tos_id' => 'getTosId',
'custom_shipping_locations' => 'getCustomShippingLocations',
'customer' => 'getCustomer',
'search_address' => 'getSearchAddress',
'updated_at' => 'getUpdatedAt'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['token'] = isset($data['token']) ? $data['token'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['customer_info'] = isset($data['customer_info']) ? $data['customer_info'] : null;
        $this->container['cart'] = isset($data['cart']) ? $data['cart'] : null;
        $this->container['user_choice'] = isset($data['user_choice']) ? $data['user_choice'] : null;
        $this->container['preselected_choice'] = isset($data['preselected_choice']) ? $data['preselected_choice'] : null;
        $this->container['shipping_categories'] = isset($data['shipping_categories']) ? $data['shipping_categories'] : null;
        $this->container['shipping_options'] = isset($data['shipping_options']) ? $data['shipping_options'] : null;
        $this->container['purchase_country'] = isset($data['purchase_country']) ? $data['purchase_country'] : null;
        $this->container['purchase_currency'] = isset($data['purchase_currency']) ? $data['purchase_currency'] : null;
        $this->container['locale'] = isset($data['locale']) ? $data['locale'] : null;
        $this->container['external_id'] = isset($data['external_id']) ? $data['external_id'] : null;
        $this->container['choices'] = isset($data['choices']) ? $data['choices'] : null;
        $this->container['additional_information'] = isset($data['additional_information']) ? $data['additional_information'] : null;
        $this->container['expires_at'] = isset($data['expires_at']) ? $data['expires_at'] : null;
        $this->container['tos_id'] = isset($data['tos_id']) ? $data['tos_id'] : null;
        $this->container['custom_shipping_locations'] = isset($data['custom_shipping_locations']) ? $data['custom_shipping_locations'] : null;
        $this->container['customer'] = isset($data['customer']) ? $data['customer'] : null;
        $this->container['search_address'] = isset($data['search_address']) ? $data['search_address'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id UUIDv4 identifier of the session. Generated when session is created. Used for updating, fetching and completing the session.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets token
     *
     * @return string
     */
    public function getToken()
    {
        return $this->container['token'];
    }

    /**
     * Sets token
     *
     * @param string $token Authorization token used by the widget to fetch, update or complete sessions. Generated when the session is created.
     *
     * @return $this
     */
    public function setToken($token)
    {
        $this->container['token'] = $token;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets customer_info
     *
     * @return \COS\Swagger\Model\CustomerInfo
     */
    public function getCustomerInfo()
    {
        return $this->container['customer_info'];
    }

    /**
     * Sets customer_info
     *
     * @param \COS\Swagger\Model\CustomerInfo $customer_info customer_info
     *
     * @return $this
     */
    public function setCustomerInfo($customer_info)
    {
        $this->container['customer_info'] = $customer_info;

        return $this;
    }

    /**
     * Gets cart
     *
     * @return \COS\Swagger\Model\Cart
     */
    public function getCart()
    {
        return $this->container['cart'];
    }

    /**
     * Sets cart
     *
     * @param \COS\Swagger\Model\Cart $cart cart
     *
     * @return $this
     */
    public function setCart($cart)
    {
        $this->container['cart'] = $cart;

        return $this;
    }

    /**
     * Gets user_choice
     *
     * @return \COS\Swagger\Model\Choice
     */
    public function getUserChoice()
    {
        return $this->container['user_choice'];
    }

    /**
     * Sets user_choice
     *
     * @param \COS\Swagger\Model\Choice $user_choice user_choice
     *
     * @return $this
     */
    public function setUserChoice($user_choice)
    {
        $this->container['user_choice'] = $user_choice;

        return $this;
    }

    /**
     * Gets preselected_choice
     *
     * @return \COS\Swagger\Model\Choice
     */
    public function getPreselectedChoice()
    {
        return $this->container['preselected_choice'];
    }

    /**
     * Sets preselected_choice
     *
     * @param \COS\Swagger\Model\Choice $preselected_choice preselected_choice
     *
     * @return $this
     */
    public function setPreselectedChoice($preselected_choice)
    {
        $this->container['preselected_choice'] = $preselected_choice;

        return $this;
    }

    /**
     * Gets shipping_categories
     *
     * @return \COS\Swagger\Model\ShippingCategory[]
     */
    public function getShippingCategories()
    {
        return $this->container['shipping_categories'];
    }

    /**
     * Sets shipping_categories
     *
     * @param \COS\Swagger\Model\ShippingCategory[] $shipping_categories Pre-configured shipping categories. All shipping options fall into one of category. If no shipping options are available (no search address provided), possible user choices are made based on categories instead.
     *
     * @return $this
     */
    public function setShippingCategories($shipping_categories)
    {
        $this->container['shipping_categories'] = $shipping_categories;

        return $this;
    }

    /**
     * Gets shipping_options
     *
     * @return \COS\Swagger\Model\ShippingOption[]
     */
    public function getShippingOptions()
    {
        return $this->container['shipping_options'];
    }

    /**
     * Sets shipping_options
     *
     * @param \COS\Swagger\Model\ShippingOption[] $shipping_options Real shipping options (as fetched from carrier integrations). Contain pickup locations with opening hours and time slots (possible delivery times).
     *
     * @return $this
     */
    public function setShippingOptions($shipping_options)
    {
        $this->container['shipping_options'] = $shipping_options;

        return $this;
    }

    /**
     * Gets purchase_country
     *
     * @return string
     */
    public function getPurchaseCountry()
    {
        return $this->container['purchase_country'];
    }

    /**
     * Sets purchase_country
     *
     * @param string $purchase_country Customer country.
     *
     * @return $this
     */
    public function setPurchaseCountry($purchase_country)
    {
        $this->container['purchase_country'] = $purchase_country;

        return $this;
    }

    /**
     * Gets purchase_currency
     *
     * @return string
     */
    public function getPurchaseCurrency()
    {
        return $this->container['purchase_currency'];
    }

    /**
     * Sets purchase_currency
     *
     * @param string $purchase_currency Customer currency.
     *
     * @return $this
     */
    public function setPurchaseCurrency($purchase_currency)
    {
        $this->container['purchase_currency'] = $purchase_currency;

        return $this;
    }

    /**
     * Gets locale
     *
     * @return string
     */
    public function getLocale()
    {
        return $this->container['locale'];
    }

    /**
     * Sets locale
     *
     * @param string $locale Customer locale.
     *
     * @return $this
     */
    public function setLocale($locale)
    {
        $this->container['locale'] = $locale;

        return $this;
    }

    /**
     * Gets external_id
     *
     * @return string
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param string $external_id Optional external ID to connect the session with an order on merchant side.
     *
     * @return $this
     */
    public function setExternalId($external_id)
    {
        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Gets choices
     *
     * @return \COS\Swagger\Model\Choice[]
     */
    public function getChoices()
    {
        return $this->container['choices'];
    }

    /**
     * Sets choices
     *
     * @param \COS\Swagger\Model\Choice[] $choices List of possible choices generated based on shipping options or categories (if options are missing).
     *
     * @return $this
     */
    public function setChoices($choices)
    {
        $this->container['choices'] = $choices;

        return $this;
    }

    /**
     * Gets additional_information
     *
     * @return \COS\Swagger\Model\AdditionalInfo
     */
    public function getAdditionalInformation()
    {
        return $this->container['additional_information'];
    }

    /**
     * Sets additional_information
     *
     * @param \COS\Swagger\Model\AdditionalInfo $additional_information additional_information
     *
     * @return $this
     */
    public function setAdditionalInformation($additional_information)
    {
        $this->container['additional_information'] = $additional_information;

        return $this;
    }

    /**
     * Gets expires_at
     *
     * @return string
     */
    public function getExpiresAt()
    {
        return $this->container['expires_at'];
    }

    /**
     * Sets expires_at
     *
     * @param string $expires_at Time of expiration of the first time slot (possible delivery time) for any shipping option.
     *
     * @return $this
     */
    public function setExpiresAt($expires_at)
    {
        $this->container['expires_at'] = $expires_at;

        return $this;
    }

    /**
     * Gets tos_id
     *
     * @return string
     */
    public function getTosId()
    {
        return $this->container['tos_id'];
    }

    /**
     * Sets tos_id
     *
     * @param string $tos_id Transport order system ID. If the session was created from order, it is id of this order. Once the session is completed and promoted to order, tos_id stores id of this order. See TOS documentation for details.
     *
     * @return $this
     */
    public function setTosId($tos_id)
    {
        $this->container['tos_id'] = $tos_id;

        return $this;
    }

    /**
     * Gets custom_shipping_locations
     *
     * @return \COS\Swagger\Model\CustomShippingLocation[]
     */
    public function getCustomShippingLocations()
    {
        return $this->container['custom_shipping_locations'];
    }

    /**
     * Sets custom_shipping_locations
     *
     * @param \COS\Swagger\Model\CustomShippingLocation[] $custom_shipping_locations custom_shipping_locations
     *
     * @return $this
     */
    public function setCustomShippingLocations($custom_shipping_locations)
    {
        $this->container['custom_shipping_locations'] = $custom_shipping_locations;

        return $this;
    }

    /**
     * Gets customer
     *
     * @return \COS\Swagger\Model\CustomerInfo
     */
    public function getCustomer()
    {
        return $this->container['customer'];
    }

    /**
     * Sets customer
     *
     * @param \COS\Swagger\Model\CustomerInfo $customer customer
     *
     * @return $this
     */
    public function setCustomer($customer)
    {
        $this->container['customer'] = $customer;

        return $this;
    }

    /**
     * Gets search_address
     *
     * @return \COS\Swagger\Model\Address
     */
    public function getSearchAddress()
    {
        return $this->container['search_address'];
    }

    /**
     * Sets search_address
     *
     * @param \COS\Swagger\Model\Address $search_address search_address
     *
     * @return $this
     */
    public function setSearchAddress($search_address)
    {
        $this->container['search_address'] = $search_address;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string $updated_at UpdatedAt describes, when was this session last updated.
     *
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
