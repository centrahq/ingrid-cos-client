<?php
/**
 * ShippingCategory
 *
 * PHP version 5
 *
 * @category Class
 * @package  COS\Swagger
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
* COS API
 *
* No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
* OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.4
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace COS\Swagger\Model;

use \ArrayAccess;
use \COS\Swagger\ObjectSerializer;

/**
 * ShippingCategory Class Doc Comment
 *
 * @category Class
 * @package  COS\Swagger
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ShippingCategory implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ShippingCategory';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
'name' => 'string',
'price' => 'int',
'sort_order' => 'int',
'region_ids' => 'string[]',
'shipping_methods' => 'string[]',
'custom_text' => 'string',
'custom_info_text' => 'string',
'preselected' => 'bool',
'requirements' => '\COS\Swagger\Model\ShippingCategoryRequirements',
'delivery_type' => 'string',
'time_slot' => '\COS\Swagger\Model\TimeSlot',
'external_id' => 'string',
'currency' => 'string',
'prices' => 'map[string,int]',
'group_id' => 'string',
'custom_unavailable_text' => 'string',
'time_formatting' => '\COS\Swagger\Model\TimeFormatting',
'pickup_location_types' => '\COS\Swagger\Model\ShippingPickupLocationType[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
'name' => null,
'price' => 'int32',
'sort_order' => 'int32',
'region_ids' => null,
'shipping_methods' => null,
'custom_text' => null,
'custom_info_text' => null,
'preselected' => 'boolean',
'requirements' => null,
'delivery_type' => null,
'time_slot' => null,
'external_id' => null,
'currency' => null,
'prices' => 'int32',
'group_id' => null,
'custom_unavailable_text' => null,
'time_formatting' => null,
'pickup_location_types' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'name' => 'name',
'price' => 'price',
'sort_order' => 'sort_order',
'region_ids' => 'region_ids',
'shipping_methods' => 'shipping_methods',
'custom_text' => 'custom_text',
'custom_info_text' => 'custom_info_text',
'preselected' => 'preselected',
'requirements' => 'requirements',
'delivery_type' => 'delivery_type',
'time_slot' => 'time_slot',
'external_id' => 'external_id',
'currency' => 'currency',
'prices' => 'prices',
'group_id' => 'group_id',
'custom_unavailable_text' => 'custom_unavailable_text',
'time_formatting' => 'time_formatting',
'pickup_location_types' => 'pickup_location_types'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'name' => 'setName',
'price' => 'setPrice',
'sort_order' => 'setSortOrder',
'region_ids' => 'setRegionIds',
'shipping_methods' => 'setShippingMethods',
'custom_text' => 'setCustomText',
'custom_info_text' => 'setCustomInfoText',
'preselected' => 'setPreselected',
'requirements' => 'setRequirements',
'delivery_type' => 'setDeliveryType',
'time_slot' => 'setTimeSlot',
'external_id' => 'setExternalId',
'currency' => 'setCurrency',
'prices' => 'setPrices',
'group_id' => 'setGroupId',
'custom_unavailable_text' => 'setCustomUnavailableText',
'time_formatting' => 'setTimeFormatting',
'pickup_location_types' => 'setPickupLocationTypes'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'name' => 'getName',
'price' => 'getPrice',
'sort_order' => 'getSortOrder',
'region_ids' => 'getRegionIds',
'shipping_methods' => 'getShippingMethods',
'custom_text' => 'getCustomText',
'custom_info_text' => 'getCustomInfoText',
'preselected' => 'getPreselected',
'requirements' => 'getRequirements',
'delivery_type' => 'getDeliveryType',
'time_slot' => 'getTimeSlot',
'external_id' => 'getExternalId',
'currency' => 'getCurrency',
'prices' => 'getPrices',
'group_id' => 'getGroupId',
'custom_unavailable_text' => 'getCustomUnavailableText',
'time_formatting' => 'getTimeFormatting',
'pickup_location_types' => 'getPickupLocationTypes'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['price'] = isset($data['price']) ? $data['price'] : null;
        $this->container['sort_order'] = isset($data['sort_order']) ? $data['sort_order'] : null;
        $this->container['region_ids'] = isset($data['region_ids']) ? $data['region_ids'] : null;
        $this->container['shipping_methods'] = isset($data['shipping_methods']) ? $data['shipping_methods'] : null;
        $this->container['custom_text'] = isset($data['custom_text']) ? $data['custom_text'] : null;
        $this->container['custom_info_text'] = isset($data['custom_info_text']) ? $data['custom_info_text'] : null;
        $this->container['preselected'] = isset($data['preselected']) ? $data['preselected'] : null;
        $this->container['requirements'] = isset($data['requirements']) ? $data['requirements'] : null;
        $this->container['delivery_type'] = isset($data['delivery_type']) ? $data['delivery_type'] : null;
        $this->container['time_slot'] = isset($data['time_slot']) ? $data['time_slot'] : null;
        $this->container['external_id'] = isset($data['external_id']) ? $data['external_id'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['prices'] = isset($data['prices']) ? $data['prices'] : null;
        $this->container['group_id'] = isset($data['group_id']) ? $data['group_id'] : null;
        $this->container['custom_unavailable_text'] = isset($data['custom_unavailable_text']) ? $data['custom_unavailable_text'] : null;
        $this->container['time_formatting'] = isset($data['time_formatting']) ? $data['time_formatting'] : null;
        $this->container['pickup_location_types'] = isset($data['pickup_location_types']) ? $data['pickup_location_types'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets price
     *
     * @return int
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param int $price [deprecated] Use prices.
     *
     * @return $this
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets sort_order
     *
     * @return int
     */
    public function getSortOrder()
    {
        return $this->container['sort_order'];
    }

    /**
     * Sets sort_order
     *
     * @param int $sort_order sort_order
     *
     * @return $this
     */
    public function setSortOrder($sort_order)
    {
        $this->container['sort_order'] = $sort_order;

        return $this;
    }

    /**
     * Gets region_ids
     *
     * @return string[]
     */
    public function getRegionIds()
    {
        return $this->container['region_ids'];
    }

    /**
     * Sets region_ids
     *
     * @param string[] $region_ids region_ids
     *
     * @return $this
     */
    public function setRegionIds($region_ids)
    {
        $this->container['region_ids'] = $region_ids;

        return $this;
    }

    /**
     * Gets shipping_methods
     *
     * @return string[]
     */
    public function getShippingMethods()
    {
        return $this->container['shipping_methods'];
    }

    /**
     * Sets shipping_methods
     *
     * @param string[] $shipping_methods shipping_methods
     *
     * @return $this
     */
    public function setShippingMethods($shipping_methods)
    {
        $this->container['shipping_methods'] = $shipping_methods;

        return $this;
    }

    /**
     * Gets custom_text
     *
     * @return string
     */
    public function getCustomText()
    {
        return $this->container['custom_text'];
    }

    /**
     * Sets custom_text
     *
     * @param string $custom_text custom_text
     *
     * @return $this
     */
    public function setCustomText($custom_text)
    {
        $this->container['custom_text'] = $custom_text;

        return $this;
    }

    /**
     * Gets custom_info_text
     *
     * @return string
     */
    public function getCustomInfoText()
    {
        return $this->container['custom_info_text'];
    }

    /**
     * Sets custom_info_text
     *
     * @param string $custom_info_text custom_info_text
     *
     * @return $this
     */
    public function setCustomInfoText($custom_info_text)
    {
        $this->container['custom_info_text'] = $custom_info_text;

        return $this;
    }

    /**
     * Gets preselected
     *
     * @return bool
     */
    public function getPreselected()
    {
        return $this->container['preselected'];
    }

    /**
     * Sets preselected
     *
     * @param bool $preselected preselected
     *
     * @return $this
     */
    public function setPreselected($preselected)
    {
        $this->container['preselected'] = $preselected;

        return $this;
    }

    /**
     * Gets requirements
     *
     * @return \COS\Swagger\Model\ShippingCategoryRequirements
     */
    public function getRequirements()
    {
        return $this->container['requirements'];
    }

    /**
     * Sets requirements
     *
     * @param \COS\Swagger\Model\ShippingCategoryRequirements $requirements requirements
     *
     * @return $this
     */
    public function setRequirements($requirements)
    {
        $this->container['requirements'] = $requirements;

        return $this;
    }

    /**
     * Gets delivery_type
     *
     * @return string
     */
    public function getDeliveryType()
    {
        return $this->container['delivery_type'];
    }

    /**
     * Sets delivery_type
     *
     * @param string $delivery_type delivery_type
     *
     * @return $this
     */
    public function setDeliveryType($delivery_type)
    {
        $this->container['delivery_type'] = $delivery_type;

        return $this;
    }

    /**
     * Gets time_slot
     *
     * @return \COS\Swagger\Model\TimeSlot
     */
    public function getTimeSlot()
    {
        return $this->container['time_slot'];
    }

    /**
     * Sets time_slot
     *
     * @param \COS\Swagger\Model\TimeSlot $time_slot time_slot
     *
     * @return $this
     */
    public function setTimeSlot($time_slot)
    {
        $this->container['time_slot'] = $time_slot;

        return $this;
    }

    /**
     * Gets external_id
     *
     * @return string
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param string $external_id external_id
     *
     * @return $this
     */
    public function setExternalId($external_id)
    {
        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency currency
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets prices
     *
     * @return map[string,int]
     */
    public function getPrices()
    {
        return $this->container['prices'];
    }

    /**
     * Sets prices
     *
     * @param map[string,int] $prices prices
     *
     * @return $this
     */
    public function setPrices($prices)
    {
        $this->container['prices'] = $prices;

        return $this;
    }

    /**
     * Gets group_id
     *
     * @return string
     */
    public function getGroupId()
    {
        return $this->container['group_id'];
    }

    /**
     * Sets group_id
     *
     * @param string $group_id group_id
     *
     * @return $this
     */
    public function setGroupId($group_id)
    {
        $this->container['group_id'] = $group_id;

        return $this;
    }

    /**
     * Gets custom_unavailable_text
     *
     * @return string
     */
    public function getCustomUnavailableText()
    {
        return $this->container['custom_unavailable_text'];
    }

    /**
     * Sets custom_unavailable_text
     *
     * @param string $custom_unavailable_text custom_unavailable_text
     *
     * @return $this
     */
    public function setCustomUnavailableText($custom_unavailable_text)
    {
        $this->container['custom_unavailable_text'] = $custom_unavailable_text;

        return $this;
    }

    /**
     * Gets time_formatting
     *
     * @return \COS\Swagger\Model\TimeFormatting
     */
    public function getTimeFormatting()
    {
        return $this->container['time_formatting'];
    }

    /**
     * Sets time_formatting
     *
     * @param \COS\Swagger\Model\TimeFormatting $time_formatting time_formatting
     *
     * @return $this
     */
    public function setTimeFormatting($time_formatting)
    {
        $this->container['time_formatting'] = $time_formatting;

        return $this;
    }

    /**
     * Gets pickup_location_types
     *
     * @return \COS\Swagger\Model\ShippingPickupLocationType[]
     */
    public function getPickupLocationTypes()
    {
        return $this->container['pickup_location_types'];
    }

    /**
     * Sets pickup_location_types
     *
     * @param \COS\Swagger\Model\ShippingPickupLocationType[] $pickup_location_types pickup_location_types
     *
     * @return $this
     */
    public function setPickupLocationTypes($pickup_location_types)
    {
        $this->container['pickup_location_types'] = $pickup_location_types;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
